#include <array>
#include <cstdint>
#include <iostream>
#include <vector>

#if defined(_MSC_VER)
#include <intrin.h>
#elif defined(__GNUC__)
#include <immintrin.h>
#endif

// AES constants
constexpr uint8_t rcon[10] = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
};

constexpr uint8_t sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5b, 0x84, 0x7a, 0x39, 0xbf, 0x4a, 0x34, 0x5a, 0x58, 0x8e,
    0x52, 0x53, 0x56, 0x57, 0x45, 0x51, 0x4f, 0x54, 0x08, 0x49, 0x4b, 0x40, 0x21, 0x7f, 0x5e, 0x0b,
    0x42, 0x79, 0x4a, 0x3e, 0x6c, 0x0a, 0xf4, 0xe6, 0x41, 0x4f, 0x01, 0x71, 0x1d, 0x29, 0xc5, 0x89,
    0x0c, 0x3b, 0x62, 0x5a, 0xbd, 0x25, 0xef, 0xfc, 0x43, 0x4e, 0x6f, 0xd8, 0x44, 0x8a, 0x7b, 0x47,
    0xa6, 0x76, 0x74, 0x20, 0x95, 0x8b, 0x5b, 0x7a, 0x87, 0x32, 0xfc, 0xeb, 0x2f, 0x10, 0x59, 0x8e,
    0x2b, 0x94, 0x72, 0x24, 0xef, 0xbe, 0x45, 0x4c, 0x0b, 0x14, 0xab, 0x00, 0x4d, 0x33, 0x85, 0x45,
    0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
    0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4,
    0x4a, 0x4e, 0x5e, 0x77, 0x26, 0x2b, 0x72, 0x09, 0x70, 0xee, 0x46, 0x3b, 0x39, 0x41, 0x4c, 0x96,
    0x45, 0x04, 0x06, 0x19, 0x23, 0x6e, 0x67, 0x5a, 0xdb, 0x3f, 0x49, 0x4e, 0x02, 0x7c, 0x37, 0x16,
    0x20, 0x73, 0x38, 0x25, 0x39, 0x0a, 0x06, 0x18, 0x1b, 0x71, 0x34, 0x4b, 0x9b, 0x11, 0x2f, 0x4a,
    0x53, 0xef, 0x28, 0x45, 0x7d, 0xbf, 0xa8, 0x88, 0x72, 0x33, 0x3c, 0x74, 0x0d, 0x74, 0x14, 0x2a,
    0x8a, 0xad, 0x4e, 0x7a, 0x8b, 0x34, 0x49, 0x1b, 0xfd, 0x6b, 0x6f, 0xc5, 0x48, 0x1f, 0x75, 0x8c
};

constexpr uint8_t inv_sbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x20, 0x3c, 0xef, 0xbb, 0xdb, 0xc7, 0x8b, 0x59, 0x5b, 0x3b, 0x52,
    0x4a, 0x83, 0xed, 0x99, 0x78, 0xfd, 0xd2, 0x0b, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40,
    0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13,
    0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0x4a, 0x4e, 0x5e, 0x77, 0x26, 0x2b, 0x72, 0x09, 0x70, 0xee,
    0x46, 0x3b, 0x39, 0x41, 0x4c, 0x96, 0x45, 0x04, 0x06, 0x19, 0x23, 0x6e, 0x67, 0x5a, 0xdb, 0x3f,
    0x49, 0x4e, 0x02, 0x7c, 0x37, 0x16, 0x20, 0x73, 0x38, 0x25, 0x39, 0x0a, 0x06, 0x18, 0x1b, 0x71
};

constexpr uint8_t gmul[256] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};
    std::vector<uint8_t> aesEncrypt(const std::vector<uint8_t>& plaintext, const std::vector<uint8_t>& key, const std::vector<uint8_t>& iv) {
        std::vector<uint8_t> ciphertext(plaintext.size());

        // AES key expansion
        std::array<uint8_t, 16> expanded_key[11];
        std::copy(key.begin(), key.end(), expanded_key[0].begin());
        for (size_t i = 1; i < 11; i++) {
            uint8_t temp[4];
            for (size_t j = 0; j < 4; j++) {
                temp[j] = expanded_key[i - 1][j];
            }
            if (i % 2 == 0) {
                for (size_t j = 0; j < 4; j++) {
                    temp[j] = sbox[temp[j]];
                }
            } else {
                for (size_t j = 0; j < 4; j++) {
                    temp[j] = inv_sbox[temp[j]];
                }
            }
            uint8_t t = expanded_key[i - 1][12];
            for (size_t j = 0; j < 4; j++) {
                expanded_key[i][j] = expanded_key[i - 1][j];
                expanded_key[i][j + 4] = expanded_key[i - 1][j + 4] ^ temp[j];
                expanded_key[i][j + 8] = expanded_key[i - 1][j + 8] ^ rcon[i / 2];
                expanded_key[i][j + 12] = expanded_key[i - 1][j + 12] ^ t;
            }
        }

        // AES encryption
        for (size_t i = 0; i < plaintext.size(); i += 16) {
            std::array<uint8_t, 16> block;
            std::copy(plaintext.begin() + i, plaintext.begin() + i + 16, block.begin());
            std::array<uint8_t, 4> state[4];
            for (size_t j = 0; j < 4; j++) {
                for (size_t k = 0; k < 4; k++) {
                    state[j][k] = block[4 * j + k];
                }
            }

            for (size_t j = 0; j < 10; j++) {
                for (size_t k = 0; k < 4; k++) {
                    uint8_t t = state[0][k];
                    for (size_t l = 0; l < 4; l++) {
                        state[l][k] = state[(l + 1) % 4][k] ^ gmul[state[l][k] + state[(l + 3) % 4][k]];
                    }
                    state[0][k] = t;
                }
                for (size_t k = 0; k < 4; k++) {
                    state[0][k] = sbox[state[0][k]];
                }
                for (size_t k = 1; k < 4; k++) {
                    for (size_t l = 0; l < 4; l++) {
                        state[l][k] = state[l][k] ^ state[l][k - 1];
                    }
                }
            }

            for (size_t j = 0; j < 4; j++) {
                for (size_t k = 0; k < 4; k++) {
                    block[4 * j + k] = state[j][k];
                }
            }

            for (size_t j = 0; j < 10; j++) {
                for (size_t k = 0; k < 4; k++) {
                    uint8_t t = block[12 + j];
                    block[12 + j] = block[12 + (j + 4) % 16];
                    block[12 + (j + 4) % 16] = t;
                }
            }

            for (size_t j = 0; j < 16; j++) {
                ciphertext[i + j] = block[j] ^ expanded_key[j / 16][j % 16];
            }
        }

        return ciphertext;
    }

std::vector<uint8_t> aesDecrypt(const std::vector<uint8_t>& ciphertext, const std::vector<uint8_t>& key, const std::vector<uint8_t>& iv) {
    std::vector<uint8_t> plaintext(ciphertext.size());

    // AES key expansion
    std::array<uint8_t, 16> expanded_key[11];
    expanded_key[0] = key;
    for (size_t i = 1; i < 11; i++) {
        uint8_t temp[4];
        for (size_t j = 0; j < 4; j++) {
            temp[j] = expanded_key[i - 1][j];
        }
        if (i % 2 == 0) {
            for (size_t j = 0; j < 4; j++) {
                temp[j] = sbox[temp[j]];
            }
        } else {
            for (size_t j = 0; j < 4; j++) {
                temp[j] = inv_sbox[temp[j]];
            }
        }
        uint8_t t = expanded_key[i - 1][12];
        for (size_t j = 0; j < 4; j++) {
            expanded_key[i][j] = expanded_key[i - 1][j];
            expanded_key[i][j + 4] = expanded_key[i - 1][j + 4] ^ temp[j];
            expanded_key[i][j + 8] = expanded_key[i - 1][j + 8] ^ rcon[i / 2];
            expanded_key[i][j + 12] = expanded_key[i - 1][j + 12] ^ t;
        }
    }

    // AES decryption
    for (size_t i = 0; i < ciphertext.size(); i += 16) {
        std::array<uint8_t, 16> block = { ciphertext.begin() + i, ciphertext.begin() + i + 16 };
        std::array<uint8_t, 4> state[4];
        for (size_t j = 0; j < 4; j++) {
            for (size_t k = 0; k < 4; k++) {
                state[j][k] = block[4 * j + k];
            }
        }

        for (size_t j = 9; j > 0; j--) {
            for (size_t k = 0; k < 4; k++) {
                uint8_t t = state[0][k];
                for (size_t l = 0; l < 4; l++) {
                    state[(l + 3) % 4][k] = state[l][k] ^ gmul[255 - (state[l][k] + state[(l + 1) % 4][k])];
                }
                state[0][k] = t;
            }
            for (size_t k = 0; k < 4; k++) {
                state[0][k] = inv_sbox[state[0][k]];
            }
            for (size_t k = 1; k < 4; k++) {
                for (size_t l = 0; l < 4; l++) {
                    state[l][k] = state[l][k] ^ state[l][k - 1];
                }
            }
        }

        for (size_t j = 0; j < 4; j++) {
            for (size_t k = 0; k < 4; k++) {
                block[4 * j + k] = state[j][k];
            }
        }

        for (size_t j = 0; j < 16; j++) {
            block[j] = block[j] ^ expanded_key[j / 16][(15 - j) % 16];
        }

        for (size_t j = 0; j < 16; j++) {
            plaintext[i + j] = block[j];
        }
    }

    return plaintext;
}

// ...

int main() {
    // ...

    std::vector<uint8_t> key(AES_KEY_SIZE);
    std::vector<uint8_t> iv(AES_BLOCK_SIZE);

    // ...

    std::vector<uint8_t> encryptedPayload = aesEncrypt(payloadData, key, iv);
    injectIVAndTag(encryptedPayload, iv, tag);
    injectPayload(targetFile, encryptedPayload, fileType);

    // ...

    return 0;
}
